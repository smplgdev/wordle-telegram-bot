import math

from alphabet import vowels, consonants, get_alphabet, rare_chars
from data.guess_dataclass import GuessPattern

greet_message = """<b>–ü—Ä–∏–≤–µ—Ç! –°—ã–≥—Ä–∞–µ–º –≤ Wordle?</b> üòâ

–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã –æ—á–µ–Ω—å –ø—Ä–æ—Å—Ç—ã–µ: –Ω—É–∂–Ω–æ —É–≥–∞–¥–∞—Ç—å —Å–ª–æ–≤–æ, —Å–æ—Å—Ç–æ—è—â–µ–µ –∏–∑ –ø—è—Ç–∏ –±—É–∫–≤, –∑–∞ 6 –ø–æ–ø—ã—Ç–æ–∫. \
–ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–π –ø–æ–ø—ã—Ç–∫–∏ —Ü–≤–µ—Ç –±—É–∫–≤ –±—É–¥–µ—Ç –º–µ–Ω—è—Ç—å—Å—è, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å, \
–∫–∞–∫–∏–µ –±—É–∫–≤—ã –µ—Å—Ç—å –≤ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–º —Å–ª–æ–≤–µ.

üü© <b>–ó–µ–ª–µ–Ω—ã–π —Ü–≤–µ—Ç</b> –±—É–∫–≤—ã –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –±—É–∫–≤–∞ –µ—Å—Ç—å –≤ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–º —Å–ª–æ–≤–µ –∏ —Å—Ç–æ–∏—Ç –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –º–µ—Å—Ç–µ
üü® <b>–ñ–µ–ª—Ç—ã–π —Ü–≤–µ—Ç</b> –±—É–∫–≤—ã –≥–æ–≤–æ—Ä–∏—Ç –æ —Ç–æ–º, —á—Ç–æ –æ–Ω–∞ –µ—Å—Ç—å –≤ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–º —Å–ª–æ–≤–µ, –Ω–æ —Å—Ç–æ–∏—Ç –Ω–∞ –¥—Ä—É–≥–æ–º –º–µ—Å—Ç–µ
‚¨õÔ∏è –ï—Å–ª–∏ —Ä—è–¥–æ–º —Å –±—É–∫–≤–æ–π –Ω–∞—Ö–æ–¥–∏—Ç—Å—è <b>—á—ë—Ä–Ω—ã–π –∫–≤–∞–¥—Ä–∞—Ç</b>, —ç—Ç–æ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ —ç—Ç–æ–π –±—É–∫–≤—ã –≤ –∑–∞–≥–∞–¥–∞–Ω–Ω–æ–º —Å–ª–æ–≤–µ –Ω–µ—Ç

<i>–ï—Å–ª–∏ —Ç–µ–±–µ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –≤—ã–∑–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ-–ø–æ–¥—Å–∫–∞–∑–∫—É –µ—â—ë —Ä–∞–∑, –æ—Ç–ø—Ä–∞–≤—å –∫–æ–º–∞–Ω–¥—É</i> /help

–°–æ–∑–¥–∞—Ç–µ–ª—å –±–æ—Ç–∞: @smplgdev"""

game_message = "–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!\n\n" + \
               "–ù–∞–ø–∏—à–∏—Ç–µ —Å–ª–æ–≤–æ –∏–∑ –ø—è—Ç–∏ –±—É–∫–≤, –∏—Å–ø–æ–ª—å–∑—É—è —Å–≤–æ—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"

warning_text = "–°–ª–æ–≤–æ –¥–æ–ª–∂–Ω–æ —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ –ø—è—Ç–∏ —Ä—É—Å—Å–∫–∏—Ö –±—É–∫–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞"
win_text = "–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏! –ü–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å –∏–≥—Ä–∞?"
lose_text = "–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ :(\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!"
game_already_started_text = "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –Ω–∞—á–∞—Ç–∞—è –∏–≥—Ä–∞. –ß—Ç–æ–±—ã –∑–∞–∫–æ–Ω—á–∏—Ç—å –µ–µ, –≤–≤–µ–¥–∏—Ç–µ /start"


def get_remaining_letters_text(guess_pattern: GuessPattern):
    match = guess_pattern.get_match_chars()
    mismatch = guess_pattern.get_mismatch_chars()
    remain = guess_pattern.get_remaining_chars()
    left = remain - match - mismatch

    string = "–ï—Å—Ç—å –≤ —Å–ª–æ–≤–µ: "
    if match:
        string += ' '.join(f'<b><u>{char}</u></b>' for char in list(match)[::-1]) + (' ' if mismatch else '')
    if mismatch:
        string += ' '.join(f'<b><u><i>{char}</i></u></b>' for char in mismatch if char not in match)
    if left:
        string += "\n\n–û—Å—Ç–∞–≤—à–∏–µ—Å—è –±—É–∫–≤—ã\n"
        string += ' '.join(f'{char}' for char in vowels if (char in left))
        string += '\n' + ' '.join(f'{char}' for char in consonants if (char in left))
        string += '\n' + ' '.join(f'{char}' for char in rare_chars if (char in left))

    return string


numbers_squares_dict = {
    1: '1Ô∏è‚É£',
    2: '2Ô∏è‚É£',
    3: '3Ô∏è‚É£',
    4: '4Ô∏è‚É£',
    5: '5Ô∏è‚É£',
    6: '6Ô∏è‚É£',
    7: '7Ô∏è‚É£',
    8: '8Ô∏è‚É£',
    9: '9Ô∏è‚É£',
}


def get_statistics_text(user_stats: list[int], cur_streak: int, best_streak: int) -> str | bool:

    def fill_line(attempt_: int, attempt_stats: int, all_stats: int):
        coefficient = attempt_stats / all_stats
        grn_squares = math.ceil(coefficient * 5)
        line = f'\n{numbers_squares_dict[attempt_]} ' + 'üü©' * grn_squares + '‚¨õÔ∏è' * (5 - grn_squares) + \
               f' {round(100 * wins_amount/total_games_won)}%, {attempt_stats} –ø.'
        return line

    total_games_won = sum(user_stats[1:])

    if total_games_won == 0:
        return "–£ –≤–∞—Å —Å–ª–∏—à–∫–æ–º –º–∞–ª–æ –∏–≥—Ä –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏! " \
               "–í—ã–∏–≥—Ä–∞–π—Ç–µ –æ–¥–Ω—É –∏–≥—Ä—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ ;-)"

    string = f"<b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\nüèÜ –í—Å–µ–≥–æ –ø–æ–±–µ–¥: {total_games_won} " \
             f"({round(100 * total_games_won / user_stats[0])}%)" \
             "\n\n–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–±–µ–¥ (—Å –∫–∞–∫–æ–π –ø–æ–ø—ã—Ç–∫–∏ –±—ã–ª–æ —É–≥–∞–¥–∞–Ω–æ —Å–ª–æ–≤–æ)"
    for attempt, wins_amount in enumerate(user_stats):
        if attempt in range(1, 6+1):
            string += fill_line(attempt, wins_amount, total_games_won)

    string += f'\n\n–ü–æ–±–µ–¥ –ø–æ–¥—Ä—è–¥: {cur_streak}'
    string += f'\n–ü–æ–±–µ–¥ –ø–æ–¥—Ä—è–¥ –º–∞–∫—Å–∏–º—É–º: {best_streak}'
    return string
